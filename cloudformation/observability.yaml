AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Resources which aim to observe the microservice cluster's key performance indicators
Resources:
    Type: AWS::CloudWatch:Dashbaord
    Properties:
        DashboardName: Service KPI Dashboard
        DashboardBody: |
{
  "widgets": [
  {
    "type": "metric",
    "x": 0,
    "y": 0,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/ApiGateway", "Latency", "ApiName", "micronaut-two", { "stat": "Average", "label": "avg", "color": "#2ca02c" } ],
      [ "...", { "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "stat": "p99", "color": "#ff7f0e", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "stat": "p95",
      "period": 1,
      "title": "Micronaut 2 Latency"
    }
  },
  {
    "type": "metric",
    "x": 6,
    "y": 0,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/Lambda", "Duration", "FunctionName", "micronaut-two", { "color": "#2ca02c", "stat": "Average" } ],
      [ "...", { "color": "#bcbd22", "stat": "p95" } ],
      [ "...", { "color": "#ff7f0e" } ],
      [ "..." ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "title": "Micronaut 2 Lamda Duration",
      "stat": "p99",
      "period": 5
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 0,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/micronaut-two' | parse @message /REPORT.*Max Memory Used: (?<MBused>.*) MB/\n| filter @message like \"REPORT\"\n| stats count() as cnt, min(MBused) as min, avg(MBused) as avg, pct(MBused, 75) as p75, pct(MBused, 95) as p95, pct(MBused, 99) as p99,  stddev(MBused) as dev by bin(60s)\n| display cnt, min, avg, p75, p95, p99, dev\n#| sort asc\n#| limit 20",
      "region": "us-west-2",
      "title": "Micronaut 2 Memory Use",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 18,
    "y": 0,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/micronaut-two' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\n\n\n\n\n\n\n\nTotalColdStartDuration\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | filter ispresent(@duration) and ispresent(InitDuration)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg,\n\n\n\n\n\n\n\npct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99,  stddev(@duration) as dev by bin(30s)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | display cnt, min, avg, p75, p95, p99, dev\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "Micronaut 2 Cold Starts",
      "view": "table"
    }
  },
  {
    "type": "metric",
    "x": 0,
    "y": 6,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/ApiGateway", "Latency", "ApiName", "micronaut-one-three-six", { "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "stat": "p95", "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "stat": "p99", "color": "#ff7f0e", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "stat": "Average",
      "period": 1,
      "title": "Micronaut 1.3.6 Latency"
    }
  },
  {
    "type": "metric",
    "x": 6,
    "y": 6,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/Lambda", "Duration", "FunctionName", "micronaut-one-three-six", { "stat": "Average", "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "color": "#ff7f0e", "stat": "p99", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "title": "Micronaut 1.3.6 Lamda Duration",
      "stat": "p95",
      "period": 5
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 6,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/micronaut-one-three-six' | parse @message /REPORT.*Max Memory Used: (?<MBused>.*) MB/\n| filter @message like \"REPORT\"\n| stats count() as cnt, min(MBused) as min, avg(MBused) as avg, pct(MBused, 75) as p75, pct(MBused, 95) as p95, pct(MBused, 99) as p99,  stddev(MBused) as dev by bin(60s)\n| display cnt, min, avg, p75, p95, p99, dev\n#| sort asc\n#| limit 20",
      "region": "us-west-2",
      "stacked": false,
      "title": "Micronaut 1.3.6 Memory Use",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 18,
    "y": 6,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/micronaut-one-three-six' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n\n\n\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\n\nTotalColdStartDuration\n\n\n\n   | filter ispresent(@duration) and ispresent(InitDuration)\n\n\n\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg,\n\npct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99,  stddev(@duration) as dev by bin(30s)\n\n\n\n   | display cnt, min, avg, p75, p95, p99, dev\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "Micronaut 1.3.6 Cold Starts",
      "view": "table"
    }
  },
  {
    "type": "metric",
    "x": 0,
    "y": 12,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/ApiGateway", "Latency", "ApiName", "node-express", { "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "stat": "p95", "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "stat": "p99", "color": "#ff7f0e", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "stat": "Average",
      "period": 1,
      "title": "Node Express Latency"
    }
  },
  {
    "type": "metric",
    "x": 6,
    "y": 12,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/Lambda", "Duration", "FunctionName", "node-express", { "stat": "Average", "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "color": "#ff7f0e", "stat": "p99", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "title": "Node Express Lambda Duration",
      "stat": "p95",
      "period": 5
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 12,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/node-express' | parse @message /REPORT.*Max Memory Used: (?<MBused>.*) MB/\n| filter @message like \"REPORT\"\n| stats count() as cnt, min(MBused) as min, avg(MBused) as avg, pct(MBused, 75) as p75, pct(MBused, 95) as p95, pct(MBused, 99) as p99,  stddev(MBused) as dev by bin(60s)\n| display cnt, min, avg, p75, p95, p99, dev\n#| sort asc\n#| limit 20",
      "region": "us-west-2",
      "stacked": false,
      "title": "Node Express Memory Use",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 18,
    "y": 12,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/node-express' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n\n\n\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\n\nTotalColdStartDuration\n\n\n\n   | filter ispresent(@duration) and ispresent(InitDuration)\n\n\n\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg,\n\npct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99,  stddev(@duration) as dev by bin(30s)\n\n\n\n   | display cnt, min, avg, p75, p95, p99, dev\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "Node Express Cold Starts",
      "view": "table"
    }
  },
  {
    "type": "metric",
    "x": 0,
    "y": 12,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/ApiGateway", "Latency", "ApiName", "node-express-typescript", { "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "stat": "p95", "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "stat": "p99", "color": "#ff7f0e", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "stat": "Average",
      "period": 1,
      "title": "Node Express Typescript Latency"
    }
  },
  {
    "type": "metric",
    "x": 6,
    "y": 12,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/Lambda", "Duration", "FunctionName", "node-express-typescript", { "stat": "Average", "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "color": "#ff7f0e", "stat": "p99", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "title": "Node Express Typescript Lambda Duration",
      "stat": "p95",
      "period": 5
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 12,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/node-express-typescript' | parse @message /REPORT.*Max Memory Used: (?<MBused>.*) MB/\n| filter @message like \"REPORT\"\n| stats count() as cnt, min(MBused) as min, avg(MBused) as avg, pct(MBused, 75) as p75, pct(MBused, 95) as p95, pct(MBused, 99) as p99,  stddev(MBused) as dev by bin(60s)\n| display cnt, min, avg, p75, p95, p99, dev\n#| sort asc\n#| limit 20",
      "region": "us-west-2",
      "stacked": false,
      "title": "Node Express Typescript Memory Use",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 18,
    "y": 12,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/node-express-typescript' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n\n\n\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\n\nTotalColdStartDuration\n\n\n\n   | filter ispresent(@duration) and ispresent(InitDuration)\n\n\n\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg,\n\npct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99,  stddev(@duration) as dev by bin(30s)\n\n\n\n   | display cnt, min, avg, p75, p95, p99, dev\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "Node Express Typescript Cold Starts",
      "view": "table"
    }
  },
  {
    "type": "metric",
    "x": 0,
    "y": 18,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/ApiGateway", "Latency", "ApiName", "quarkus-api-gw-event-handler", { "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "stat": "p95", "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "stat": "p99", "color": "#ff7f0e", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "stat": "Average",
      "period": 1,
      "title": "quarkus-api-gw-event-handler Latency"
    }
  },
  {
    "type": "metric",
    "x": 6,
    "y": 18,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/Lambda", "Duration", "FunctionName", "quarkus-api-gw-event-handler", { "stat": "Average", "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "color": "#ff7f0e", "stat": "p99", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "title": "quarkus-api-gw-event-handler Lambda Duration",
      "stat": "p95",
      "period": 5
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 18,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/quarkus-api-gw-event-handler' | parse @message /REPORT.*Max Memory Used: (?<MBused>.*) MB/\n| filter @message like \"REPORT\"\n| stats count() as cnt, min(MBused) as min, avg(MBused) as avg, pct(MBused, 75) as p75, pct(MBused, 95) as p95, pct(MBused, 99) as p99,  stddev(MBused) as dev by bin(60s)\n| display cnt, min, avg, p75, p95, p99, dev\n#| sort asc\n#| limit 20",
      "region": "us-west-2",
      "stacked": false,
      "title": "quarkus-api-gw-event-handler Memory Use",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 18,
    "y": 18,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/quarkus-api-gw-event-handler' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n\n\n\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\n\nTotalColdStartDuration\n\n\n\n   | filter ispresent(@duration) and ispresent(InitDuration)\n\n\n\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg,\n\npct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99,  stddev(@duration) as dev by bin(30s)\n\n\n\n   | display cnt, min, avg, p75, p95, p99, dev\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "quarkus-api-gw-event-handler Cold Starts",
      "view": "table"
    }
  },
  {
    "type": "metric",
    "x": 0,
    "y": 24,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/ApiGateway", "Latency", "ApiName", "quarkus-api-gw-event-handler-jvm", { "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "stat": "p95", "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "stat": "p99", "color": "#ff7f0e", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "stat": "Average",
      "period": 1,
      "title": "quarkus-api-gw-event-handler-jvm Latency"
    }
  },
  {
    "type": "metric",
    "x": 6,
    "y": 24,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/Lambda", "Duration", "FunctionName", "quarkus-api-gw-event-handler-jvm", { "stat": "Average", "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "color": "#ff7f0e", "stat": "p99", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "title": "quarkus-api-gw-event-handler-jvm Lambda Duration",
      "stat": "p95",
      "period": 5
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 24,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/quarkus-api-gw-event-handler-jvm' | parse @message /REPORT.*Max Memory Used: (?<MBused>.*) MB/\n| filter @message like \"REPORT\"\n| stats count() as cnt, min(MBused) as min, avg(MBused) as avg, pct(MBused, 75) as p75, pct(MBused, 95) as p95, pct(MBused, 99) as p99,  stddev(MBused) as dev by bin(60s)\n| display cnt, min, avg, p75, p95, p99, dev\n#| sort asc\n#| limit 20",
      "region": "us-west-2",
      "stacked": false,
      "title": "quarkus-api-gw-event-handler-jvm Memory Use",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 18,
    "y": 24,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/quarkus-api-gw-event-handler-jvm' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n\n\n\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\n\nTotalColdStartDuration\n\n\n\n   | filter ispresent(@duration) and ispresent(InitDuration)\n\n\n\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg,\n\npct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99,  stddev(@duration) as dev by bin(30s)\n\n\n\n   | display cnt, min, avg, p75, p95, p99, dev\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "quarkus-api-gw-event-handler-jvm Cold Starts",
      "view": "table"
    }
  },
  {
    "type": "metric",
    "x": 0,
    "y": 30,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/ApiGateway", "Latency", "ApiName", "quarkus-api-gw-proxy", { "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "stat": "p95", "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "stat": "p99", "color": "#ff7f0e", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "stat": "Average",
      "period": 1,
      "title": "quarkus-api-gw-proxy Latency"
    }
  },
  {
    "type": "metric",
    "x": 6,
    "y": 30,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/Lambda", "Duration", "FunctionName", "quarkus-api-gw-proxy", { "stat": "Average", "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "color": "#ff7f0e", "stat": "p99", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "title": "quarkus-api-gw-proxy Lambda Duration",
      "stat": "p95",
      "period": 5
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 30,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/quarkus-api-gw-proxy' | parse @message /REPORT.*Max Memory Used: (?<MBused>.*) MB/\n| filter @message like \"REPORT\"\n| stats count() as cnt, min(MBused) as min, avg(MBused) as avg, pct(MBused, 75) as p75, pct(MBused, 95) as p95, pct(MBused, 99) as p99,  stddev(MBused) as dev by bin(60s)\n| display cnt, min, avg, p75, p95, p99, dev\n#| sort asc\n#| limit 20",
      "region": "us-west-2",
      "stacked": false,
      "title": "quarkus-api-gw-proxy Memory Use",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 18,
    "y": 30,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/quarkus-api-gw-proxy' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n\n\n\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\n\nTotalColdStartDuration\n\n\n\n   | filter ispresent(@duration) and ispresent(InitDuration)\n\n\n\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg,\n\npct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99,  stddev(@duration) as dev by bin(30s)\n\n\n\n   | display cnt, min, avg, p75, p95, p99, dev\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "quarkus-api-gw-proxy Cold Starts",
      "view": "table"
    }
  },
  {
    "type": "metric",
    "x": 0,
    "y": 36,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/ApiGateway", "Latency", "ApiName", "quarkus-api-gw-proxy-jvm", { "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "stat": "p95", "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "stat": "p99", "color": "#ff7f0e", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "stat": "Average",
      "period": 1,
      "title": "quarkus-api-gw-proxy-jvm Latency"
    }
  },
  {
    "type": "metric",
    "x": 6,
    "y": 36,
    "width": 6,
    "height": 6,
    "properties": {
      "metrics": [
      [ "AWS/Lambda", "Duration", "FunctionName", "quarkus-api-gw-proxy-jvm", { "stat": "Average", "color": "#2ca02c", "label": "avg" } ],
      [ "...", { "color": "#bcbd22", "label": "p95" } ],
      [ "...", { "color": "#ff7f0e", "stat": "p99", "label": "p99" } ]
      ],
      "view": "timeSeries",
      "stacked": false,
      "region": "us-west-2",
      "title": "quarkus-api-gw-proxy-jvm Lambda Duration",
      "stat": "p95",
      "period": 5
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 36,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/quarkus-api-gw-proxy-jvm' | parse @message /REPORT.*Max Memory Used: (?<MBused>.*) MB/\n| filter @message like \"REPORT\"\n| stats count() as cnt, min(MBused) as min, avg(MBused) as avg, pct(MBused, 75) as p75, pct(MBused, 95) as p95, pct(MBused, 99) as p99,  stddev(MBused) as dev by bin(60s)\n| display cnt, min, avg, p75, p95, p99, dev\n#| sort asc\n#| limit 20",
      "region": "us-west-2",
      "stacked": false,
      "title": "quarkus-api-gw-proxy-jvm Memory Use",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 18,
    "y": 36,
    "width": 6,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/quarkus-api-gw-proxy-jvm' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n\n\n\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\n\nTotalColdStartDuration\n\n\n\n   | filter ispresent(@duration) and ispresent(InitDuration)\n\n\n\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg,\n\npct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99,  stddev(@duration) as dev by bin(30s)\n\n\n\n   | display cnt, min, avg, p75, p95, p99, dev\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "quarkus-api-gw-proxy-jvm Cold Starts",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 0,
    "y": 42,
    "width": 12,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/micronaut-two' | SOURCE '/aws/lambda/micronaut-one-three-six' | SOURCE '/aws/lambda/node-express' | SOURCE '/aws/lambda/node-express-typescript' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n   | parse @log /245815535100:\\/aws\\/lambda\\/(?<App>.*)/\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as TotalColdStartDuration, @log\n   | filter ispresent(@duration) and ispresent(InitDuration)\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg, pct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99, max(@duration) as mx, stddev(@duration) as dev by bin(1w), App\n   | display App, cnt, min, avg, p75, p95, p99, mx, dev\n   | sort p75\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "Cold Lambda Duration",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 42,
    "width": 12,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/micronaut-two' | SOURCE '/aws/lambda/micronaut-one-three-six' | SOURCE '/aws/lambda/node-express' | SOURCE '/aws/lambda/node-express-typescript' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n   | parse @log /245815535100:\\/aws\\/lambda\\/(?<App>.*)/\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as TotalColdStartDuration\n   | filter ispresent(@duration) and ispresent(InitDuration)\n   | stats count() as cnt, min(InitDuration) as min, avg(InitDuration) as avg, pct(InitDuration, 75) as p75, pct(InitDuration, 95) as p95, pct(InitDuration, 99) as p99, max(InitDuration) as mx, stddev(InitDuration) as dev by bin(1w), App\n   | display App, cnt, min, avg, p75, p95, p99, mx, dev\n   | sort p75\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "Cold start Init Duration",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 0,
    "y": 48,
    "width": 12,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/micronaut-two' | SOURCE '/aws/lambda/micronaut-one-three-six' | SOURCE '/aws/lambda/node-express' | SOURCE '/aws/lambda/node-express-typescript' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n| parse @log /245815535100:\\/aws\\/lambda\\/(?<App>.*)/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\n\n\n\n\n\n\n\nTotalColdStartDuration, @log\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | filter ispresent(@duration) and ispresent(TotalColdStartDuration)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | stats count() as cnt, min(TotalColdStartDuration) as min,\n\n\n\n\n\n\n\navg(TotalColdStartDuration) as avg, pct(TotalColdStartDuration, 75) as p75, pct(TotalColdStartDuration, 95) as p95, pct(TotalColdStartDuration, 99) as p99, max(TotalColdStartDuration) as mx, stddev(TotalColdStartDuration) as dev by bin(1w), App\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | display App, cnt, min, avg, p75, p95, p99, mx, dev\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | sort p75\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "Total Cold Runtimes",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 12,
    "y": 48,
    "width": 12,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/micronaut-two' | SOURCE '/aws/lambda/micronaut-one-three-six' | SOURCE '/aws/lambda/node-express' | SOURCE '/aws/lambda/node-express-typescript' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy' |    parse @message /REPORT.*Init Duration: (?<InitDuration>.*) ms/\n| parse @log /245815535100:\\/aws\\/lambda\\/(?<App>.*)/\n   | fields @duration as ColdLambdaDuration, @duration + InitDuration as\nTotalColdStartDuration, @log\n\n   | filter ispresent(@duration) and not ispresent(InitDuration)\n\n   | stats count() as cnt, min(@duration) as min, avg(@duration) as avg,\npct(@duration, 75) as p75, pct(@duration, 95) as p95, pct(@duration, 99) as p99, max(@duration) as mx, stddev(@duration) as dev by bin(1w), App\n\n   | display App, cnt, min, avg, p75, p95, p99, mx, dev\n\n   | sort p75\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "Non-Cold Runtimes",
      "view": "table"
    }
  },
  {
    "type": "log",
    "x": 0,
    "y": 54,
    "width": 12,
    "height": 6,
    "properties": {
      "query": "SOURCE '/aws/lambda/micronaut-two' | SOURCE '/aws/lambda/micronaut-one-three-six' | SOURCE '/aws/lambda/node-express' | SOURCE '/aws/lambda/node-express-typescript' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler' | SOURCE '/aws/lambda/quarkus-api-gw-event-handler-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy-jvm' | SOURCE '/aws/lambda/quarkus-api-gw-proxy' | parse @message /REPORT.*Max Memory Used: (?<MBused>.*) MB/\n| parse @log /245815535100:\\/aws\\/lambda\\/(?<App>.*)/\n   | stats count() as cnt, min(MBused) as min, avg(MBused) as avg, pct(MBused, 75) as p75, pct(MBused, 95) as p95, pct(MBused, 99) as p99, max(MBused) as mx, stddev(MBused) as dev by bin(1w), App\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | display App, cnt, min, avg, p75, p95, p99, mx, dev\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   | sort p75\n",
      "region": "us-west-2",
      "stacked": false,
      "title": "Memory Usage",
      "view": "table"
    }
  }
  ]
}